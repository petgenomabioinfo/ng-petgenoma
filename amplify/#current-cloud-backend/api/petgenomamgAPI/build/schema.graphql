type User {
  id: ID!
  username: String!
  phoneNb: String!
  kits(filter: ModelKitFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelKitConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Kit {
  id: ID!
  kitType: String!
  userID: ID!
  kitBatchNb: String
  processStatus: String!
  registrationDate: String!
  petName: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  phoneNb: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getKit(id: ID!): Kit
  listKits(filter: ModelKitFilterInput, limit: Int, nextToken: String): ModelKitConnection
}

input CreateUserInput {
  id: ID
  username: String!
  phoneNb: String!
}

input UpdateUserInput {
  id: ID!
  username: String
  phoneNb: String
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createKit(input: CreateKitInput!, condition: ModelKitConditionInput): Kit
  updateKit(input: UpdateKitInput!, condition: ModelKitConditionInput): Kit
  deleteKit(input: DeleteKitInput!, condition: ModelKitConditionInput): Kit
}

input ModelUserConditionInput {
  username: ModelStringInput
  phoneNb: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateKit: Kit @aws_subscribe(mutations: ["createKit"])
  onUpdateKit: Kit @aws_subscribe(mutations: ["updateKit"])
  onDeleteKit: Kit @aws_subscribe(mutations: ["deleteKit"])
}

type ModelKitConnection {
  items: [Kit]
  nextToken: String
}

input ModelKitFilterInput {
  id: ModelIDInput
  kitType: ModelStringInput
  userID: ModelIDInput
  kitBatchNb: ModelStringInput
  processStatus: ModelStringInput
  registrationDate: ModelStringInput
  petName: ModelStringInput
  and: [ModelKitFilterInput]
  or: [ModelKitFilterInput]
  not: ModelKitFilterInput
}

input CreateKitInput {
  id: ID
  kitType: String!
  userID: ID!
  kitBatchNb: String
  processStatus: String!
  registrationDate: String!
  petName: String!
}

input UpdateKitInput {
  id: ID!
  kitType: String
  userID: ID
  kitBatchNb: String
  processStatus: String
  registrationDate: String
  petName: String
}

input DeleteKitInput {
  id: ID
}

input ModelKitConditionInput {
  kitType: ModelStringInput
  userID: ModelIDInput
  kitBatchNb: ModelStringInput
  processStatus: ModelStringInput
  registrationDate: ModelStringInput
  petName: ModelStringInput
  and: [ModelKitConditionInput]
  or: [ModelKitConditionInput]
  not: ModelKitConditionInput
}
